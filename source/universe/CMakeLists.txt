if(USE_UNIVERSE_MODULE)
	file(GLOB_RECURSE source_files "*.h*" "*.c*")
	add_library(flame_universe SHARED ${source_files} universe.natvis)
	assign_source_group("${CMAKE_CURRENT_SOURCE_DIR}" "" ${source_files})
	set_target_properties(flame_universe PROPERTIES FOLDER "flame")
	target_compile_definitions(flame_universe PRIVATE FLAME_UNIVERSE_MODULE)
	target_link_libraries(flame_universe PUBLIC flame_graphics)

	if(USE_AUDIO_MODULE)
		target_compile_definitions(flame_universe PRIVATE USE_AUDIO_MODULE)
		target_link_libraries(flame_universe PRIVATE flame_audio)
	endif()
	
	if(USE_PHYSICS_MODULE)
		target_compile_definitions(flame_universe PRIVATE USE_PHYSICS_MODULE)
		target_link_libraries(flame_universe PRIVATE flame_physics)
	endif() 

	if(USE_RECASTNAV)
		target_compile_definitions(flame_universe PRIVATE USE_RECASTNAV)
		target_link_libraries(flame_universe PRIVATE RecastNavigation::Detour RecastNavigation::Recast RecastNavigation::DebugUtils RecastNavigation::DetourCrowd)
	endif()

	if(USE_FORTUNE_ALGORITHM)
		target_compile_definitions(flame_universe PUBLIC USE_FORTUNE_ALGORITHM)
		target_include_directories(flame_universe PRIVATE "${FORTUNE_ALGORITHM_DIR}/src")
		target_link_libraries(flame_universe PRIVATE "${FORTUNE_ALGORITHM_DIR}/build/Debug/Fortune.lib")
	endif()

	generate_typeinfo(flame_universe "enum starts_with flame::")

	file(GLOB headers "*.h*")
	list(FILTER headers EXCLUDE REGEX ".*_private[.]h$")
	file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/flame/universe")
	if(headers)
		add_custom_command(TARGET flame_universe PRE_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_SOURCE_DIR}/include/flame/universe")
		add_custom_command(TARGET flame_universe PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${headers} "${CMAKE_SOURCE_DIR}/include/flame/universe")
	endif()

	file(GLOB headers "components/*.h*")
	list(FILTER headers EXCLUDE REGEX ".*_private[.]h$")
	file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/flame/universe/components")
	if(headers)
		add_custom_command(TARGET flame_universe PRE_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_SOURCE_DIR}/include/flame/universe/components")
		add_custom_command(TARGET flame_universe PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${headers} "${CMAKE_SOURCE_DIR}/include/flame/universe/components")
	endif()

	file(GLOB headers "systems/*.h*")
	list(FILTER headers EXCLUDE REGEX ".*_private[.]h$")
	file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/flame/universe/systems")
	if(headers)
		add_custom_command(TARGET flame_universe PRE_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_SOURCE_DIR}/include/flame/universe/systems")
		add_custom_command(TARGET flame_universe PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${headers} "${CMAKE_SOURCE_DIR}/include/flame/universe/systems")
	endif()

	file(GLOB headers "project/*.h*")
	list(FILTER headers EXCLUDE REGEX ".*_private[.]h$")
	file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/flame/universe/project")
	if(headers)
		add_custom_command(TARGET flame_universe PRE_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_SOURCE_DIR}/include/flame/universe/project")
		add_custom_command(TARGET flame_universe PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${headers} "${CMAKE_SOURCE_DIR}/include/flame/universe/project")
	endif()
endif()
