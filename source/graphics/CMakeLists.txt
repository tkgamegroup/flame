file(GLOB source_files "*.h*" "*.c*")
file(GLOB_RECURSE bp_node_source_files "blueprint_library/*.h*" "blueprint_library/*.c*")
set(source_files "${source_files};${bp_node_source_files}")
add_library(flame_graphics SHARED ${source_files})

set_target_properties		(flame_graphics PROPERTIES FOLDER "flame")
target_compile_definitions	(flame_graphics PRIVATE FLAME_GRAPHICS_MODULE)
target_link_libraries		(flame_graphics PUBLIC flame_foundation)
target_compile_definitions	(flame_graphics PRIVATE VK_USE_PLATFORM_WIN32_KHR)
target_compile_definitions	(flame_graphics PRIVATE VK_USE_PLATFORM_WIN32_KHR)
target_include_directories	(flame_graphics PRIVATE "$ENV{VK_SDK_PATH}/Include")
target_link_libraries		(flame_graphics PRIVATE "$ENV{VK_SDK_PATH}/Lib/vulkan-1.lib")
target_include_directories	(flame_graphics PRIVATE "${Stb_INCLUDE_DIR}")
target_link_libraries		(flame_graphics PRIVATE gli)
target_link_libraries		(flame_graphics PRIVATE spirv-cross-core)
target_link_libraries		(flame_graphics PRIVATE spirv-cross-glsl)
target_link_libraries		(flame_graphics PRIVATE spirv-cross-reflect)
target_link_libraries		(flame_graphics PRIVATE spirv-cross-cpp)

if(USE_MSDFGEN)
	target_compile_definitions(flame_graphics PRIVATE USE_MSDFGEN)
	target_link_libraries(flame_graphics PRIVATE msdfgen::msdfgen-full)
else()
	message(STATUS "graphics module: msdfgen is required for sdf fonts")
endif()

if(USE_NVTT)
	target_compile_definitions(flame_graphics PRIVATE USE_NVTT)
	target_include_directories(flame_graphics PRIVATE "${NVTT_INCLUDE_DIR}")
	target_link_libraries(flame_graphics PRIVATE "${NVTT_LIB_PATH}")
	add_custom_command(TARGET flame_graphics POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${NVTT_DLL_PATH}" $(TargetDir))
	add_custom_command(TARGET flame_graphics POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${NVTT_CUDA_DLL_PATH}" $(TargetDir))
else()
	message(STATUS "graphics module: NVTT is required for texture compression")
endif()

if(USE_ASSIMP)
	target_link_libraries(flame_graphics PRIVATE assimp::assimp)
else()
	message(STATUS "graphics module: Assimp is required for model (except FBX) import")
endif()

if(USE_FBXSDK)
	target_compile_definitions(flame_graphics PRIVATE USE_FBXSDK)
	target_compile_definitions(flame_graphics PRIVATE FBXSDK_SHARED)
	target_include_directories(flame_graphics PRIVATE "${FBXSDK_INCLUDE_DIR}")
	target_link_libraries(flame_graphics PRIVATE "${FBXSDK_LIB_PATH}")
	add_custom_command(TARGET flame_graphics POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${FBXSDK_DLL_PATH}" $(TargetDir))
else()
	message(STATUS "graphics module: FBX SDK is required for FBX import")
endif()

if(USE_FONT_AWESOME)
	target_compile_definitions(flame_graphics PRIVATE USE_FONT_AWESOME)
	target_compile_definitions(flame_graphics PRIVATE FONT_AWESOME_DIR="${FONT_AWESOME_DIR}")
endif()

if(USE_IMGUI)
	target_compile_definitions(flame_graphics PUBLIC USE_IMGUI)
	target_link_libraries(flame_graphics PUBLIC imgui)
else()
	message(STATUS "graphics module: ImGui is required for ui")
endif()

if(HAS_RENDERDOC)
	target_compile_definitions(flame_graphics PUBLIC HAS_RENDERDOC)
	target_compile_definitions(flame_graphics PRIVATE RENDERDOC_HEADER="${RENDERDOC_DIR}/renderdoc_app.h")
endif()

generate_typeinfo(flame_graphics "enum starts_with flame::graphics::")

file(GLOB headers "*.h*")
list(FILTER headers EXCLUDE REGEX ".*_private[.]h$")
file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/flame/graphics")
add_custom_command(TARGET flame_graphics PRE_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_SOURCE_DIR}/include/flame/graphics")
add_custom_command(TARGET flame_graphics PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${headers} "${CMAKE_SOURCE_DIR}/include/flame/graphics")
